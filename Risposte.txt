RISPOSTE SELECT

1

SELECT * 
FROM software_houses 
WHERE country = 'United States' 
-------------------------------------
2

SELECT *
FROM players
WHERE city = 'Rogahnland'
-------------------------------------
3

SELECT *
FROM players
WHERE name LIKE '%a'
-------------------------------------
4

SELECT *
FROM reviews
WHERE player_id = 800
------------------------------------
5

SELECT *
FROM tournaments
WHERE `year` = '2015'
------------------------------------
6

SELECT *
FROM awards
WHERE description LIKE '%facere%'
------------------------------------
7

SELECT videogame_id
FROM category_videogame
WHERE category_id = 2 
OR category_id = 6
GROUP BY videogame_id
---------------------------------------
8

SELECT *
FROM reviews
WHERE rating <= 4
AND rating >= 2
-------------------------------------------
9

SELECT *
FROM videogames
WHERE YEAR(release_date) = '2020'
------------------------------------------
10

SELECT videogame_id
FROM reviews
WHERE rating = 5
GROUP BY videogame_id
--------------------------------------------
11

SELECT COUNT(id) , AVG(rating)
FROM reviews
WHERE videogame_id = 412
-----------------------------------------
12

SELECT COUNT(id) 
FROM videogames
WHERE software_house_id = 1
AND YEAR(release_date) = '2018'


RISPOSTE GROUP BY

1

SELECT country, COUNT(id) as total_software_houses
FROM software_houses
GROUP BY country
------------------------------------------------------
2

SELECT videogame_id, COUNT(id) as total_reviews
FROM reviews
GROUP BY videogame_id
----------------------------------------------------
3

SELECT COUNT(videogame_id)
FROM pegi_label_videogame
GROUP BY pegi_label_id
----------------------------------------------------
4

SELECT YEAR(release_date), COUNT(id) total_released_games
FROM videogames
GROUP BY YEAR(release_date)
------------------------------------------------------
5

SELECT device_id, COUNT(videogame_id) total_avaiable_games
FROM device_videogame
GROUP BY device_id
--------------------------------------------------------
6

SELECT videogame_id, AVG(rating) AS average_rating
FROM reviews
GROUP BY videogame_id
ORDER BY average_rating DESC;


RISPOSTE JOIN

1
SELECT DISTINCT players.*
FROM players 
JOIN reviews  ON players.id = reviews.player_id;
------------------------------------------------------
2

SELECT DISTINCT videogames.* 
FROM `videogames` 
JOIN tournament_videogame ON videogames.id = tournament_videogame.videogame_id
JOIN tournaments ON tournaments.id = tournament_videogame.tournament_id
WHERE tournaments.year = 2016;
------------------------------------------------------
3

SELECT v.id AS videogame_id, v.name AS videogame_name, c.name AS category_name
FROM videogames v
JOIN category_videogame vc ON v.id = vc.videogame_id
JOIN categories c ON vc.category_id = c.id;
---------------------------------------------------------------
4

SELECT DISTINCT software_houses.*
FROM `software_houses` 
JOIN videogames ON software_houses.id = videogames.software_house_id
WHERE YEAR(videogames.release_date) > 2020
---------------------------------------------------------
5

SELECT sh.name AS software_house_name, v.name AS videogame_name, a.name AS award_name
FROM software_houses sh
JOIN videogames v ON sh.id = v.software_house_id
JOIN award_videogame va ON v.id = va.videogame_id
JOIN awards a ON va.award_id = a.id;
-------------------------------------------------------------
6 se da 500 è per duplicazione di valori, come id di category e pegi_labels

SELECT DISTINCT videogames.id AS videogame_id, videogames.name AS videogame_name, categories.*, pegi_labels.*
FROM videogames
JOIN category_videogame ON category_videogame.id = videogames.id
JOIN categories ON categories.id = category_videogame.category_id
JOIN pegi_label_videogame ON pegi_label_videogame.videogame_id = videogames.id
JOIN pegi_labels ON pegi_labels.id = pegi_label_videogame.pegi_label_id
JOIN reviews ON videogames.id = reviews.videogame_id
WHERE reviews.rating >= 4
--------------------------------------------------------------
7

SELECT DISTINCT
    v.name
FROM
    videogames v
    INNER JOIN tournament_videogame tv ON v.id = tv.videogame_id
    INNER JOIN tournaments t ON tv.tournament_id = t.id
    INNER JOIN player_tournament pt ON t.id = pt.tournament_id
    INNER JOIN players p ON pt.player_id = p.id
WHERE
    p.name LIKE 'S%'
ORDER BY
    v.name;
------------------------------------------------------
8

SELECT DISTINCT tournaments.city
FROM videogames 
INNER JOIN award_videogame ON award_videogame.videogame_id = videogames.id
INNER JOIN awards ON award_videogame.award_id = awards.id
INNER JOIN tournament_videogame ON videogames.id = tournament_videogame.videogame_id
INNER JOIN tournaments ON tournament_videogame.tournament_id = tournaments.id
WHERE awards.id = 1
AND award_videogame.year = 2018;
------------------------------------------------------
9

SELECT DISTINCT players.name AS player_name, players.lastname AS lastname , videogames.name AS videogame_name
FROM players
JOIN player_tournament ON player_tournament.player_id = players.id
JOIN tournaments ON player_tournament.tournament_id = tournaments.id
JOIN tournament_videogame ON tournament_videogame.tournament_id = tournaments.id
JOIN videogames ON videogames.id = tournament_videogame.videogame_id
JOIN award_videogame ON award_videogame.videogame_id = videogames.id
JOIN awards ON award_videogame.award_id = awards.id
WHERE awards.name = 'Gioco più atteso'
AND award_videogame.year = 2018
AND tournaments.year = 2019
